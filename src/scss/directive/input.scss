@use '../abstract/variable' as var;

@layer component {
	.app-input {
		$input-horizontal-padding: var(--spacing-3);
		$input-vertical-padding: var(--spacing-2);
		$border-width: 1.5px;
		$transition-duration: 0.25s;

		position: relative;

		input,
		.border-container,
		.label-container {
			padding: $input-vertical-padding $input-horizontal-padding;
		}

		label {
			span {
				position: absolute;
				font-size: var(--font-size-sm);
				visibility: hidden;
			}

			input {
				position: relative;
				z-index: 1;
				width: 100%;

				&::placeholder {
					opacity: 0;
				}
			}
		}

		.border-container,
		.label-container {
			position: absolute;
			inset: 0;
		}

		.border-container {
			overflow: hidden;

			&::before {
				content: '';

				position: absolute;
				inset: 0;

				border: solid $border-width var(--color-contrast-mid);
				border-radius: var(--border-radius-3);

				clip-path: polygon(
					0 0,
					calc($input-horizontal-padding + var(--label-width) / 2) 0,
					calc($input-horizontal-padding + var(--label-width) / 2) 2px,
					calc($input-horizontal-padding + var(--label-width) / 2) 2px,
					calc($input-horizontal-padding + var(--label-width) / 2) 0,
					100% 0,
					100% 100%,
					0 100%
				);

				transition: clip-path $transition-duration ease-in-out;
			}
		}

		.label {
			position: relative;
			bottom: 0;
			transition:
				bottom $transition-duration ease-in-out,
				font-size $transition-duration ease-in-out;
		}

		.placeholder {
			position: relative;
			top: calc(var(--input-height) / 2);
			opacity: 0;
			transition:
				top $transition-duration ease-in-out,
				opacity $transition-duration ease-in-out;
		}

		&.focused,
		&.filled {
			.border-container {
				&::before {
					$clip-gap: 3px;

					clip-path: polygon(
						0 0,
						calc($input-horizontal-padding - $clip-gap) 0,
						calc($input-horizontal-padding - $clip-gap) 2px,
						calc($input-horizontal-padding + var(--label-width) + $clip-gap) 2px,
						calc($input-horizontal-padding + var(--label-width) + $clip-gap) 0,
						100% 0,
						100% 100%,
						0 100%
					);
				}
			}

			.label {
				bottom: calc(var(--input-height) / 2 + 1px);
				font-size: var(--font-size-sm);
			}

			.placeholder {
				top: 0;
				left: 0;
				opacity: 0.5;
			}
		}

		&:hover,
		&.focused {
			.border-container {
				&::before {
					border-color: var(--color-accent);
				}
			}
		}

		&.filled {
			.placeholder {
				opacity: 0;
				transition: none;
			}
		}
	}

	.app-radio {
		label {
			input {
				border-radius: 50%;
			}
		}
	}

	.app-checkbox {
		label {
			input {
				border-radius: var(--border-radius-1);
			}
		}
	}

	.app-radio,
	.app-checkbox {
		label {
			display: flex;
			flex-direction: row;
			gap: var(--spacing-2);
			align-items: center;

			input {
				aspect-ratio: 1;
				width: 16px;
				border: solid 1.5px;
				border-color: var(--color-contrast-mid);

				&:checked {
					border-color: var(--color-contrast);
					background-color: var(--color-contrast-mid);
				}

				&:hover {
					border-color: var(--color-accent);
				}
			}
		}
	}
}
